install.packages(c("aplpack", "arm", "backports", "BH", "bitops", "boot", "broom", "callr", "car", "carData", "class", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "cowplot", "crayon", "crosstalk", "curl", "data.table", "data.tree", "DBI", "dbplyr", "deldir", "desc", "DiagrammeR", "digest", "diptest", "dplyr", "e1071", "effects", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "Formula", "fs", "generics", "GGally", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gistr", "glue", "gsl", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "influenceR", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lavaan", "lifecycle", "lme4", "lmtest", "lubridate", "magrittr", "manipulateWidget", "maptools", "MASS", "Matrix", "matrixcalc", "MatrixModels", "MBESS", "mime", "mnormt", "modelr", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "onewaytests", "OpenMx", "openssl", "openxlsx", "pander", "pbkrtest", "pgirmess", "pillar", "pkgbuild", "pkgload", "processx", "promises", "ps", "psych", "purrr", "quantreg", "R6", "raster", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "RCurl", "readr", "readstata13", "reprex", "reshape2", "rgdal", "rgeos", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "sandwich", "scales", "sem", "semTools", "sf", "shiny", "sp", "SparseM", "spatial", "spData", "spdep", "splancs", "StanHeaders", "stringi", "survey", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "ufs", "units", "utf8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "xfun", "xml2", "zip", "zoo"))
install.packages(c("aplpack", "arm", "backports", "BH", "bitops", "boot", "broom", "callr", "car", "carData", "class", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "cowplot", "crayon", "crosstalk", "curl", "data.table", "data.tree", "DBI", "dbplyr", "deldir", "desc", "DiagrammeR", "digest", "diptest", "dplyr", "e1071", "effects", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "Formula", "fs", "generics", "GGally", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gistr", "glue", "gsl", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "influenceR", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lavaan", "lifecycle", "lme4", "lmtest", "lubridate", "magrittr", "manipulateWidget", "maptools", "MASS", "Matrix", "matrixcalc", "MatrixModels", "MBESS", "mime", "mnormt", "modelr", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "onewaytests", "OpenMx", "openssl", "openxlsx", "pander", "pbkrtest", "pgirmess", "pillar", "pkgbuild", "pkgload", "processx", "promises", "ps", "psych", "purrr", "quantreg", "R6", "raster", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "RCurl", "readr", "readstata13", "reprex", "reshape2", "rgdal", "rgeos", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "sandwich", "scales", "sem", "semTools", "sf", "shiny", "sp", "SparseM", "spatial", "spData", "spdep", "splancs", "StanHeaders", "stringi", "survey", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "ufs", "units", "utf8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "xfun", "xml2", "zip", "zoo"))
install.packages(c("aplpack", "arm", "backports", "BH", "bitops", "boot", "broom", "callr", "car", "carData", "class", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "cowplot", "crayon", "crosstalk", "curl", "data.table", "data.tree", "DBI", "dbplyr", "deldir", "desc", "DiagrammeR", "digest", "diptest", "dplyr", "e1071", "effects", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "Formula", "fs", "generics", "GGally", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gistr", "glue", "gsl", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "influenceR", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lavaan", "lifecycle", "lme4", "lmtest", "lubridate", "magrittr", "manipulateWidget", "maptools", "MASS", "Matrix", "matrixcalc", "MatrixModels", "MBESS", "mime", "mnormt", "modelr", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "onewaytests", "OpenMx", "openssl", "openxlsx", "pander", "pbkrtest", "pgirmess", "pillar", "pkgbuild", "pkgload", "processx", "promises", "ps", "psych", "purrr", "quantreg", "R6", "raster", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "RCurl", "readr", "readstata13", "reprex", "reshape2", "rgdal", "rgeos", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "sandwich", "scales", "sem", "semTools", "sf", "shiny", "sp", "SparseM", "spatial", "spData", "spdep", "splancs", "StanHeaders", "stringi", "survey", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "ufs", "units", "utf8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "xfun", "xml2", "zip", "zoo"))
install.packages(c("aplpack", "arm", "backports", "BH", "bitops", "boot", "broom", "callr", "car", "carData", "class", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "cowplot", "crayon", "crosstalk", "curl", "data.table", "data.tree", "DBI", "dbplyr", "deldir", "desc", "DiagrammeR", "digest", "diptest", "dplyr", "e1071", "effects", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "Formula", "fs", "generics", "GGally", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gistr", "glue", "gsl", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "influenceR", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lavaan", "lifecycle", "lme4", "lmtest", "lubridate", "magrittr", "manipulateWidget", "maptools", "MASS", "Matrix", "matrixcalc", "MatrixModels", "MBESS", "mime", "mnormt", "modelr", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "onewaytests", "OpenMx", "openssl", "openxlsx", "pander", "pbkrtest", "pgirmess", "pillar", "pkgbuild", "pkgload", "processx", "promises", "ps", "psych", "purrr", "quantreg", "R6", "raster", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "RCurl", "readr", "readstata13", "reprex", "reshape2", "rgdal", "rgeos", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "sandwich", "scales", "sem", "semTools", "sf", "shiny", "sp", "SparseM", "spatial", "spData", "spdep", "splancs", "StanHeaders", "stringi", "survey", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "ufs", "units", "utf8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "xfun", "xml2", "zip", "zoo"))
library(GEOquery)
#To install the GEOquery package:
BiocManager::install(c("GEOquery"))
BiocManager::install("limma")
#Installing packages
install.packages ('dendextend')
install.packages('gplots')
library(GEOquery)
library(limma)
library(dendextend)
library(gplots)
library(dplyr)
#Loads the desired data file in a .Soft format from Geo. Accession code and GSE (expression values) are passed as arguments
gse <- getGEO("GDS5093", GSEMatrix = TRUE)
#The input is in a different format, lets put it into a data frame.
X <- Table(gse)
'Genes are rows and samples are columns'
#Converts GSE format (complicated) into expression set format
eset <- GDS2eSet(gse, do.log2=TRUE)
#featureNames(eset) and sampleNames(eset)
featureNames(eset)
sampleNames(eset)
#Extracting the phenotypes
pDat <- pData(eset)
pDat
str(pDat)
# Naming rows to make analysis easier
X <- Table(gse)
geneNames <-as.character(X$IDENTIFIER)
X<-exprs(eset)
rownames(X)<-geneNames
# Exploratory plot of the first rows across all columns (variables)
plot(X[1:4,]~X[5:8,])
# Many rows (genes) are repeated, we have to look for duplicates
# and average their values
dim(X)
length(which(duplicated(rownames(X))))
# Eliminates duplicates from X
?avereps()
X <-avereps(X)
' We calculate distance between clusters with
Euclidean and Mahalanobis distance'
' Linkage methods are single linkage, complete linkage,
and Wards method '
?dist()
?hclust()
#Transpose the df as it has more rows than columns (?)
Xt <-t(X)
#Calculate the euclidean distance  of clusters
eu.dist <-dist(Xt,method = 'euclidean',
diag = FALSE, upper = FALSE,
)
comp.clust <- hclust(eu.dist, method = 'complete', members = NULL)
comp.clust
#Plotting the dendogram
plot (comp.clust)
dendo <- as.dendrogram(comp.clust)
#how to use the pDat object to see the phenotypic state
plot(dendo)
?as.dendrogram()
SDs<-(apply(X,1,sd))
tail(newX)
newX<-cbind(X,SDs)
SDs<-(apply(X,1,sd))
newX<-cbind(X,SDs)
tail(newX)
head(newX$SDs)
newXdf<- as.data.frame(newX)
head(newXdf$SDs)
orden<-newXdf[order(newXdf[,57]),]
head(order)
head(orden)
head(newXdf$SDs)
View(newXdf)
max(newXdf$SDs)
min(newXdf$SDs)
head(orden)
ordered <- newXdf[order(newXdf$SDs)]
ordered <- newXdf[order(newXdf$SDs),]
View(ordered)
head(ordered$SDs)
ordered <- newXdf[order(-newXdf$SDs),]
head(ordered$SDs)
#Selecting the top 100 rows
top100 <- ordered[1:100,]
View(top100)
head(top100$SDs)
library(gplots)
install.packages('gplots')
library(gplots)
install.packages('gplots')
install.packages('gplots')
(Lmatrix, labCol = pDat$disease.state )
Lmatrix <- X [1:100,]
mapa <- heatmap (Lmatrix)
#Heatmap 2 with labels according to disease status
mapa2 <-heatmap.2(Lmatrix, labCol = pDat$disease.state )
?heatmap()
#Now let's try with the top 100 genes staying with heatmap
mapa100<-heatmap(top100, labCol = pDat$disease.state )
#Now let's try with the top 100 genes staying with heatmap
top100matrix<-as.matrix(top100)
mapa100<-heatmap(top100matrix, labCol = pDat$disease.state )
Xpca <- prcomp(t(X), scale= TRUE)
# Summary of the Xpca is stored in a list
PCs <- summary(Xpca)
#Only the proportion of variance is stored from the list
Prop.PCs <- PCs$importance[2,] * 100
#Plot barcharts
barplot(Prop.PCs)
PCscores <- Xpca$x
#colours for the plot
my_cols <- c("blue", "red", "orange","green")
names(my_cols) <- c("Convalescent", "Dengue Hemorrhagic Fever", "Dengue Fever", "healthy control")
#Plot
plot(PCscores[,1]~PCscores [,2],
col = my_cols[pDat$disease.state],
ylab = 'PC1 16%', xlab = 'PC2 8%')
legend ('right',legend = names(my_cols),
col = c("blue", "red", "orange","green"),pch=21)
library(ggplot2)
#Lets try with ggplot2 scatterplot
PCplot<-ggplot(PCscores[,1]~PCscores [,2])
#Lets try with ggplot2 scatterplot
PCplot<-ggplot(PCscores, aes(x=[,2],y=[,1]))
#Lets try with ggplot2 scatterplot
PCplot<-ggplot(PCscores, aes(x=[,2],y=[,1])) + geom_point()
#Lets try with ggplot2 scatterplot
PCplot<-ggplot(PCscores, aes(x=PCscores[,2],y=PCscores[,1])) + geom_point()
View(PCscores)
#Lets try with ggplot2 scatterplot
PCplot<-ggplot(PCscores, aes(x='PC2',y='PC1')) + geom_point()
#Lets try with ggplot2 scatterplot
PCplot<-ggplot(PCscores, aes(x='PC2',y='PC1'))
View(PCscores)
#Lets try with ggplot2 scatterplot
PCscores.df<-as.data.frame(PCscores)
PCplot<-ggplot(PCscores.df, aes(x='PC2',y='PC1'))
PCplot + geom_point()
PCplot<-ggplot(PCscores.df, aes(x=[,2],y=[,1]))
PCplot<-ggplot(PCscores.df, aes(x=PCscores.df[,2],y=PCscores.df[,1]))
PCplot + geom_point()
#Plot PC1 and PC2
PCplot<-ggplot(PCscores.df, aes(x=PCscores.df[,2],y=PCscores.df[,1,],
col = pDat$disease.state))
PCplot + geom_point()
PCplot + geom_point() + theme_classic()
PCplot + geom_point(aes(size=16)) + theme_classic()
#Plot PC1 and PC2
PCplot<-ggplot(PCscores.df, aes(x=PCscores.df[,2],y=PCscores.df[,1,],
col = pDat$disease.state, size = 16))
PCplot + geom_point(aes(size=16)) + theme_classic()
PCplot + geom_point(aes(size=16)) + theme_classic() + theme(legend.position="top")
PCplot + geom_point(aes(size=16)) + theme_classic() + theme(legend.position="top", legend.key.size =  16)
+ theme(legend.position="top", legend.key.size = 0)
+ theme(legend.position="top", legend.key.size = 10)
+ theme(legend.position="top" + legend.key.size = 10)
+ theme(legend.position="top") + theme(legend.key.size = 16)
PCplot + geom_point(aes(size=16)) + theme_classic() + theme(legend.position="top") + theme(legend.key.size = 16)
PCplot + geom_point(aes(size=16)) + theme_classic() +
theme(legend.position="top")
#Plot PC1 and PC2
PCplot<-ggplot(PCscores.df, aes(x=PCscores.df[,2],y=PCscores.df[,1,],
col = pDat$disease.state, size = 16,
xlab = 'PC2-8%', ylab = 'PC1-16%'))
PCplot + geom_point(aes(size=16)) + theme_classic() +
theme(legend.position="top")
PCplot + geom_point(aes(size=16)) + theme_classic() +
theme(legend.position="top") + labs(x ='PC2-8%', y ='PC1-16%')
PCplot + geom_point(aes(size=16)) + theme_classic() +
theme(legend.position="top") + labs(x ='PC2 - 8%', y ='PC1 - 16%')
()
?biplot()
View(PCscores)
biplot(Xpca$rotation)
view(Xpca$rotation)
View(Xpca$rotation)
biplot(x=Xpca$rotation[,1:2],y=Xpca$rotation[1:2,])
biplot(x=Xpca$rotation,,y=Xpca$rotation)
biplot(x=Xpca$rotation,y=Xpca$rotation)
### Installing packages ###
install.packages('classyfire')
library(ggplot2)
install.packages('gcookbook')
library(gcookbook)
gc()
cabbage_exp
ggplot(cabbage_exp, aes(x =Data,y=Weight, fill= Cultivar)) +
geom_col(position = 'fill')
ggplot(cabbage_exp, aes(x =Date,y=Weight, fill= Cultivar)) +
geom_col(position = 'fill')
str(cabbage_exp)
prueba <- matrix(data = NA, nrow = 2, ncol = 2)
prueba <- matrix(data = NA, nrow = 2, ncol = 3)
prueba[1,]<- 1,2
prueba[1,]<- c(1,2)
prueba[1,]<- c(1)
View(prueba)
colnames(prueba)<-c('Guess','Actual','Percentage')
prueba[1,]<- 1
prueba[1,2]<-2
prueba[1,3]<-ifelse(prueba[1,1]==prueba[1,2],'Correct','Incorrect')
prueba <- matrix(data = NA, nrow = 2, ncol = 4)
colnames(prueba)<-c('Right','Wrong','Total','Percentage')
prueab[1,3]<-prueba[1,1]/length(prueba)*100
prueba[1,3]<-prueba[1,1]/length(prueba)*100
View(prueba)
prueba <- matrix(data = NA, nrow = 2, ncol = 4)
colnames(prueba)<-c('Right','Wrong','Total','Percentage')
prueba[1,1]<-11
prueba[1,2]<-0
prueba[1,3]<-prueba[1,1]/length(prueba)*100
View(prueba)
prueba <- matrix(data = NA, nrow = 23, ncol = 4)
colnames(prueba)<-c('Right','Wrong','Total','Percentage')
prueba[1,1]<-11
prueba[1,2]<-0
prueba[1,3]<-prueba[1,1]/length(prueba)*100
View(prueba)
prueba[1,3]<-prueba[1,1]+prueba[1,2]
prueba[1,4]<-prueba[1,1]/prueba[1,3]*100
View(prueba)
prueba[1,1]<-11
prueba[1,2]<-0
prueba[1,3]<-prueba[1,1]+prueba[1,2]
prueba[1,4]<-prueba[1,1]/prueba[1,3]*100
View(prueba)
prueba <- matrix(data = NA, nrow = 2, ncol = 4)
prueba[1,1]<-11
prueba[1,2]<-0
prueba[1,3]<-prueba[1,1]+prueba[1,2]
prueba[1,4]<-prueba[1,1]/prueba[1,3]*100
View(prueba)
colnames(prueba)<-c('Right','Wrong','Total','Percentage')
View(prueba)
prueba[2,2]<-1
prueba[2,1]<-11
prueba[2,2]<-1
prueba[2,3]<-prueba[2,1]+prueba[2,2]
prueba[2,4]<-prueba[2,1]/prueba[2,3]*100
View(prueba)
prueba2<-<- matrix(data = NA, nrow = 4, ncol = 4)
colnames(prueba2)<-c('Right','Wrong','Total','Percentage')
prueba2<-<- matrix(data = NA, nrow = 4, ncol = 4)
prueba2<-matrix(data = NA, nrow = 4, ncol = 4)
colnames(prueba2)<-c('Right','Wrong','Total','Percentage')
View(prueba2)
View(prueba2)
prueba2[1,1]<-1
prueba[1,2]<-1
View(prueba2)
prueba[1,2]<-1
View(prueba2)
prueba[2,2]<-1
prueba[2,1]<-1
View(prueba2)
prueba2[1,1]<-1
prueba2[2,1]<-1
View(prueba2)
prueba2[3,1]<-2
prueba2[4,1]<-2
View(prueba2)
colnames(prueba2)<-c('Classif','Guess','Total','Percentage')
prueba2[1,1]<-1
prueba2[2,1]<-1
prueba2[3,1]<-2
prueba2[4,1]<-2
View(prueba2)
prueba2[1,2]<-1
prueba2[2,2]<-2
prueba2[3,2]<-2
prueba2[4,2]<-1
View(prueba2)
prueba2[1,3]<-12
prueba2[2,3]<-0
prueba2[3,3]<-1
prueba2[4,3]<-10
View(prueba2)
prueba2[1,4]<-prueba2[1,3]/(prueba2[1,3]+prueba2[2,3])*100
View(prueba2)
prueba2[2,4]<-prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100
View(prueba2)
prueba2[3,4]<-
prueba2[4,4]<-prueba2[3,4]/(prueba2[3,3]+prueba2[4,3])*100
View(prueba2)
prueba2[3,4]<-
prueba2[4,4]<-prueba2[4,3]/(prueba2[3,3]+prueba2[4,3])*100
View(prueba2)
prueba2[3,4]<-prueba2[3,3]/(prueba2[3,3]+prueba2[4,3])*100
View(prueba2)
#Graph
prueba2<-as.data.frame(prueba2)
gpplot(prueba2, aes(x=Classif,y=Percentage,fill='Guess'))
ggplot(prueba2, aes(x=Classif,y=Percentage,fill='Guess'))
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) + geom_col(position = 'fill')
str(prueba2)
prueba2$Classif<-as.factor(prueba2$Classif)
prueba2$Guess<-as.factor(prueba2$Guess)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) + geom_col(position = 'fill')
View(prueba2)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) + geom_col()
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col() +
theme_classic()
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.5) +
theme_classic()
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.2) +
theme_classic()
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.5) +
theme_classic()
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic()
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage))
#Col4
prueba2[1,4]<-round(prueba2[1,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage))
prueba2[2,4]<-round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
prueba2[3,4]<-round(prueba2[3,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
prueba2[4,4]<-round(prueba2[4,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage))
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage)), position = position_stack(vjust =0.5)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage), position = position_stack(vjust =0.5))
prueba2[2,4]<-ifelse(round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)==0,NA,round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
View(prueba2)
View(prueba2)
View(prueba2)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage), position = position_stack(vjust =0.5))
prueba2[2,4]<-ifelse(round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)==0,"",round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage), position = position_stack(vjust =0.5))
prueba2[2,4]<-ifelse(round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)==0,null,round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage), position = position_stack(vjust =0.5))
prueba2[2,4]<-ifelse(round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)==0,1,round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
prueba2[4,4]<-round(prueba2[4,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
prueba2[2,4]<-round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
#Col1
prueba2[1,1]<-1
prueba2[2,1]<-1
prueba2[3,1]<-2
prueba2[4,1]<-2
#Col2
prueba2[1,2]<-1
prueba2[2,2]<-2
prueba2[3,2]<-2
prueba2[4,2]<-1
#Col3
prueba2[1,3]<-12
prueba2[2,3]<-0
prueba2[3,3]<-1
prueba2[4,3]<-10
#Col4
prueba2[1,4]<-round(prueba2[1,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
#prueba2[2,4]<-round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
prueba2[3,4]<-round(prueba2[3,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
prueba2[4,4]<-round(prueba2[4,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
View(prueba2)
View(prueba2)
prueba2<-as.data.frame(prueba2)
str(prueba2)
View(prueba2)
prueba2<-matrix(data = NA, nrow = 4, ncol = 4)
colnames(prueba2)<-c('Classif','Guess','Total','Percentage')
#Col1
prueba2[1,1]<-1
prueba2[2,1]<-1
prueba2[3,1]<-2
prueba2[4,1]<-2
#Col2
prueba2[1,2]<-1
prueba2[2,2]<-2
prueba2[3,2]<-2
prueba2[4,2]<-1
#Col3
prueba2[1,3]<-12
prueba2[2,3]<-0
prueba2[3,3]<-1
prueba2[4,3]<-10
#Col4
prueba2[1,4]<-round(prueba2[1,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
#prueba2[2,4]<-round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
prueba2[3,4]<-round(prueba2[3,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
prueba2[4,4]<-round(prueba2[4,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
colnames(prueba2)<-c('Classif','Guess','Total','Percentage')
View(prueba2)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(aes(label = Percentage), position = position_stack(vjust =0.5))
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5))
View(prueba2)
prueba2[2,4]<-round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
View(prueba2)
prueba2<-as.data.frame(prueba2)
prueba2$Classif<-as.factor(prueba2$Classif)
prueba2$Guess<-as.factor(prueba2$Guess)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5))
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5)) +
theme_dark()
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3, border=1) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5)) +
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3, border=1) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5))
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5))
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5)) +
xlab('Actual Class') + ylab)'Percentage of Class Predicted (%)'
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5)) +
xlab('Actual Class') + ylab('Percentage of Class Predicted (%)')
View(prueba2)
View(prueba2)
prueba2[3,3]<-10
prueba2[4,3]<-1
#Col4
prueba2[1,4]<-round(prueba2[1,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
prueba2[2,4]<-round(prueba2[2,3]/(prueba2[1,3]+prueba2[2,3])*100,digits=0)
prueba2[3,4]<-round(prueba2[3,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
prueba2[4,4]<-round(prueba2[4,3]/(prueba2[3,3]+prueba2[4,3])*100,digits=0)
prueba2<-as.data.frame(prueba2)
str(prueba2)
prueba2$Classif<-as.factor(prueba2$Classif)
prueba2$Guess<-as.factor(prueba2$Guess)
ggplot(prueba2, aes(x=Classif,y=Percentage,fill=Guess)) +
geom_col(width = 0.3) +
theme_classic() +
geom_text(data = subset(prueba2,Percentage != 0),
aes(label = Percentage), position = position_stack(vjust =0.5)) +
xlab('Actual Class') + ylab('Percentage of Class Predicted (%)')
install.packages("caret", dependencies = c("Depends", "Suggests"))
library('ymal')
install package(yaml)
install.packages(yaml)
install.packages('yaml')
file -> read_yaml('C:\Users\dpava\OneDrive\Desktop\PythonMl\job.yaml')
file -> read_yaml('\Users\dpava\OneDrive\Desktop\PythonMl\job.yaml')
file -> read_yaml('/Users/dpava/OneDrive/Desktop/PythonMl/job.yaml')
file -> read_yaml(job.yaml)
setwd("C:/Users/dpava/OneDrive/Desktop/PythonMl")
file -> read_yaml(job.yaml)
file -> read_yaml('job.yaml')
file -> read_yaml(job.yaml)
file -> read_yaml(job)
file -> read_yaml("job.yaml")
file<- read_yaml("job.yaml")
)
file <- read_yaml("job.yaml")
library(yaml)
job <- read_yaml('job.yaml')
head(job)
head(job)
job <- read_yaml('job.yaml')
head(job)
View(job)
